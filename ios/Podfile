# Override Firebase SDK Version (optional for Firebase)
# $FirebaseSDKVersion = '11.9.0'

# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Global settings (before target)
use_frameworks! :linkage => :static
# $RNFirebaseAsStaticFramework = true

target 'Resonate' do
  config = use_native_modules!

  # Firebase pods (commented out if not needed yet)
  # pod 'Firebase/Auth'
  # pod 'Firebase/Analytics'
  # pod 'Firebase/Firestore'
  # pod 'Firebase/Storage'

  use_react_native!(
    :path => config[:reactNativePath],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
  end
end













# # Override Firebase SDK Version
# $FirebaseSDKVersion = '11.9.0'

# # Resolve react_native_pods.rb with node to allow for hoisting
# require Pod::Executable.execute_command('node', ['-p',
#   'require.resolve(
#     "react-native/scripts/react_native_pods.rb",
#     {paths: [process.argv[1]]},
#   )', __dir__]).strip

# platform :ios, min_ios_version_supported
# prepare_react_native_project!

# # Global settings (before target)
# use_frameworks! :linkage => :static
# $RNFirebaseAsStaticFramework = true



# target 'Resonate' do

#   config = use_native_modules!

#   # Only include necessary Firebase products
#   pod 'Firebase/Auth'
#   pod 'Firebase/Analytics'
#   pod 'Firebase/Firestore'
#   pod 'Firebase/Storage'

#   use_react_native!(
#     :path => config[:reactNativePath],
#     :app_path => "#{Pod::Config.instance.installation_root}/.."
#   )

#   post_install do |installer|
#     react_native_post_install(
#       installer,
#       config[:reactNativePath],
#       :mac_catalyst_enabled => false,
#     )
#   end
# end
